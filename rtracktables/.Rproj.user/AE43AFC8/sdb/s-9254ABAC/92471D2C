{
    "contents" : "\nGetAroundTSS <- function(FullGeneBounds,distance,distanceIn){\n  require(GenomicRanges)\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  TempFramePos <- cbind(as.data.frame(elementMetadata(PosGenes)),width(PosGenes))\n  TempFrameNeg <- cbind(as.data.frame(elementMetadata(NegGenes)),width(NegGenes))\n  colnames(TempFramePos)[3] <- \"WidthOfOriginalGene\"\n  colnames(TempFrameNeg)[3] <- \"WidthOfOriginalGene\"  \n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(start(ranges(PosGenes))))-distance,end=(as.vector(start(ranges(PosGenes))))+distanceIn),strand=strand(PosGenes),TempFramePos)\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(end(ranges(NegGenes)))-distanceIn),end=(as.vector(end(ranges(NegGenes))))+distance),strand=strand(NegGenes),TempFrameNeg)\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\n\nGetTargetTSS <- function(RegionRanges,distance,distanceIn=0,min){\n  RegionRanges <- RegionRanges[width(RegionRanges) > min]\n  TSSs <- GetAroundTSS(RegionRanges,distance,distanceIn=distanceIn)\n  #print(TSSs)\n  #  Centre <- GRanges(seqnames=seqnames(RegionRanges),IRanges(start=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)-distance),end=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)+distance)),strand=\"*\")\n  #RegionRangesList <- GRangesList(TSSs[strand(TSSs) == \"+\"],TSSs[strand(TSSs) == \"-\"])\n  return(TSSs)\n}\n\nGetAroundTTS <- function(FullGeneBounds,distance,distanceIn){\n  require(GenomicRanges)\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  TempFramePos <- cbind(as.data.frame(elementMetadata(PosGenes)),width(PosGenes))\n  TempFrameNeg <- cbind(as.data.frame(elementMetadata(NegGenes)),width(NegGenes))\n  colnames(TempFramePos)[3] <- \"WidthOfOriginalGene\"\n  colnames(TempFrameNeg)[3] <- \"WidthOfOriginalGene\"  \n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(end(ranges(PosGenes))))-distanceIn,end=(as.vector(end(ranges(PosGenes))))+distance),strand=strand(PosGenes),TempFramePos)\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(start(ranges(NegGenes)))-distance),end=(as.vector(start(ranges(NegGenes))))+distanceIn),strand=strand(NegGenes),TempFrameNeg)\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\n\nGetTargetTTS <- function(RegionRanges,distance,distanceIn=0,min){\n  RegionRanges <- RegionRanges[width(RegionRanges) > min]\n  TTSs <- GetAroundTTS(RegionRanges,distance,distanceIn=distanceIn)\n  #print(TSSs)\n  #  Centre <- GRanges(seqnames=seqnames(RegionRanges),IRanges(start=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)-distance),end=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)+distance)),strand=\"*\")\n  #RegionRangesList <- GRangesList(TSSs[strand(TSSs) == \"+\"],TSSs[strand(TSSs) == \"-\"])\n  return(TTSs)\n}\n\n\nGetGene <- function(FullGeneBounds,distanceFromStart,distanceFromEnd,min){\n  require(GenomicRanges)\n  FullGeneBounds <- FullGeneBounds[width(FullGeneBounds) > min]\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(start(ranges(PosGenes))))-distanceFromStart,end=(as.vector(end(ranges(PosGenes))))+distanceFromEnd),strand=strand(PosGenes),elementMetadata(PosGenes))\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(start(ranges(NegGenes)))-distanceFromEnd),end=(as.vector(end(ranges(NegGenes))))+distanceFromStart),strand=strand(NegGenes),elementMetadata(NegGenes))\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\nregionPlot <- function(bamFile,testRanges,nOfWindows=100,FragmentLength=150,style=\"point\",distanceAround=1500,distanceInRegionStart=1500,distanceOutRegionStart=1500,distanceInRegionEnd=1500,distanceOutRegionEnd=1500,paired=F,normalize=\"RPM\",plotBy=\"coverage\",removeDup=F,verbose=T,format=\"bam\",seqlengths=NULL){\n  if(!verbose){\n    suppressMessages(runRegionPlot())\n  }\n  result <- runRegionPlot(bamFile,testRanges,nOfWindows,FragmentLength,style,distanceAround,distanceInRegionStart,distanceOutRegionStart,distanceInRegionEnd,distanceOutRegionEnd,paired,normalize,plotBy,removeDup,format,seqlengths)\n  return(result)  \n}\nrunRegionPlot <- function(bamFile,testRanges,nOfWindows=100,FragmentLength=150,style=\"point\",distanceAround=1500,distanceInRegionStart=1500,distanceOutRegionStart=1500,distanceInRegionEnd=1500,distanceOutRegionEnd=1500,paired=F,normalize=\"RPM\",plotBy=\"coverage\",removeDup=F,format=\"bam\",seqlengths=NULL){\n  require(QuasR)\n  require(rtracklayer)  \n  require(GenomicAlignments)\n  require(GenomicRanges)  \n  \n  #bamFile <- \"/home//pgellert/Dropbox (Lymphocyte_Developme)/WeiWeiLiang/RNAPII/Sample_R1-0hDupMarked.bam\"\n  #bamFile <-\"Downloads//mergedETOH.bwRange5.bw\"\n  #bamFile <-\"Downloads//Sample_R1-6hDupMarkedNormalised.bw\"\n  #testRanges <- mm9PC\n  #nOfWindows=100\n  #FragmentLength=150\n  #style=\"region\"\n  #distanceAround=1500\n  #distanceInRegionStart=1500\n  #distanceOutRegionStart=1500\n  #distanceInRegionEnd=1500\n  #distanceOutRegionEnd=1500\n  #paired=F\n  #normalize=\"RPM\"\n  #plotBy=\"coverage\"\n  #removeDup=F  \n  #format=\"bigwig\"\n  #seqlengths=NULL\n  \n  ## Initialize empty matricies and paramaters for collecting coverage analysis\n  if(style == \"region\" | style==\"regionandpoint\"){\n  posRegionStartMat <- NULL\n  posRegionEndMat <- NULL\n  negRegionStartMat <- NULL\n  negRegionEndMat <- NULL\n  RegionsMat <- NULL\n  maxDistance <- max(distanceOutRegionStart,distanceOutRegionEnd)\n  distanceUpStart <- distanceOutRegionStart\n  distanceDownEnd <- distanceOutRegionEnd\n  \n  }\n  \n  if(style == \"point\"){\n    PosRegionMat <- NULL\n    NegRegionMat <- NULL\n    RegionsMat <- NULL    \n    maxDistance=distanceAround\n    distanceUpStart <- distanceAround\n    distanceDownEnd <- distanceAround    \n  }\n  \n  if(format == \"bam\"){\n    ## Get all chromosomes in bamFile\n    message(\"Reading Bam header information...\",appendLF = FALSE)\n    allchrs <- names(scanBamHeader(bamFile)[[1]]$targets)\n    lengths <- as.vector(scanBamHeader(bamFile)[[1]]$targets)\n    names(lengths) <- allchrs\n    message(\"..Done\")\n  }\n  if(format==\"bigwig\"){\n    message(\"Importing BigWig...\",appendLF = FALSE)\n    genomeCov <- import.bw(bamFile,as = \"RleList\")\n    if(is.null(seqlengths)){\n    seqlengths(genomeCov) <- unlist(lapply(genomeCov,length))\n    }else{\n      seqlengths(genomeCov)[match(names(lengths),names(genomeCov))] <- lengths\n    }\n    lengths <- seqlengths(genomeCov)\n    allchrs <- names(lengths)\n    message(\"..Done\")\n  }\n  \n  \n  ## Filter testRanges to those contained within chromosomes.\n  message(\"Filtering regions which extend outside of genome boundaries...\",appendLF = FALSE)\n  testRangeNames <- unique(seqnames(testRanges))\n  temptestranges <- GRanges()\n  for(i in 1:length(testRangeNames)){\n    perchrRanges <- testRanges[seqnames(testRanges) %in% testRangeNames[i]]\n    temptestranges <- c(temptestranges,perchrRanges[end(perchrRanges)+maxDistance < lengths[names(lengths) %in% testRangeNames[i]]\n                                                    & start(perchrRanges)-maxDistance > 0 ])\n    #print(i)\n  }\n\n  message(\"..Done\")\n  message(\"Filtered \",length(testRanges)-length(temptestranges),\" of \",length(testRanges),\" regions\")\n  testRanges <- temptestranges\n  message(\"Splitting regions by Watson and Crick strand..\",appendLF = FALSE)\n  \n  strand(testRanges[strand(testRanges) == \"*\"]) <- \"+\"\n  testRangesPos <- testRanges[strand(testRanges) == \"+\"]\n  testRangesNeg <- testRanges[strand(testRanges) == \"-\"]\n  message(\"..Done\")\n  if(style==\"region\"){\n    message(\"Filtering regions which are smaller than windows into region...\",appendLF = FALSE)\n    ## Split Regions into those on positive and negative strands..\n    testRangesPos <- testRangesPos[(end(testRangesPos)-distanceInRegionEnd) - (start(testRangesPos)+distanceInRegionStart) > nOfWindows]\n    testRangesNeg <- testRangesNeg[(end(testRangesNeg)-distanceInRegionStart) - (start(testRangesNeg)+distanceInRegionEnd) > nOfWindows]\n    message(\"..Done\")\n  }  \n  \n  message(\"Found \",length(testRangesPos),\" Watson strand regions\")\n  message(\"Found \",length(testRangesNeg),\" Crick strand regions\")\n  \n\n  ## Extend regions and get positive versus negative reads.\n  message(\"Extending regions..\",appendLF=FALSE)    \n  exttestRanges <- c(GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceUpStart,end(testRangesPos)+distanceDownEnd)),\n                     GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)-distanceDownEnd,end(testRangesNeg)+distanceUpStart))\n  )\n  message(\"...done\")   \n  \n  \n  if(!removeDup){\n    Param <- ScanBamParam(which=GRanges(seqnames=seqnames(exttestRanges[seqnames(exttestRanges) %in% allchrs]),IRanges(start=start(exttestRanges[seqnames(exttestRanges) %in% allchrs]),end=end(exttestRanges[seqnames(exttestRanges) %in% allchrs]))))\n  }else{\n    Param <- ScanBamParam(flag=scanBamFlag(isDuplicate=FALSE),which=GRanges(seqnames=seqnames(exttestRanges[seqnames(exttestRanges) %in% allchrs]),IRanges(start=start(exttestRanges[seqnames(exttestRanges) %in% allchrs]),end=end(exttestRanges[seqnames(exttestRanges) %in% allchrs]))))\n  }\n  \n  if(format == \"bam\"){\n  message(\"Reading tags from \",bamFile,appendLF=FALSE)\n  totalReads <- alignmentStats(bamFile)[,\"mapped\"]\n  if(paired==FALSE){\n  total <- readGAlignmentsFromBam(bamFile,param=Param)\n  message(\"..Done.\\nRead in \",length(total),\" reads\")\n  message(\"Extending reads to fragmentlength of \",FragmentLength,appendLF=F)\n  temp <- resize(as(total,\"GRanges\"),FragmentLength,\"start\")\n  message(\"..done\")\n  }\n  if(paired==TRUE){\n    tempPaired <- readGAlignmentPairsFromBam(bamFile)\n    tempPaired <- tempPaired[isProperPair(tempPaired)]\n    temp <- GRanges(seqnames(tempPaired),IRanges(start(left(tempPaired)),end(right(tempPaired))))\n    message(\"..Done.\\nRead in \",length(temp),\" reads\")\n    message(\"..done\")\n  }  \n  message(\"Calculating coverage..\",appendLF=FALSE)\n  genomeCov <- coverage(temp)\n  message(\"..done\")\n  }\n  chromosomes <- seqlevels(genomeCov) \n  \n  if(style==\"point\"){\n    testRangesPos <- resize(testRangesPos,1,\"center\")\n    testRangesNeg <- resize(testRangesNeg,1,\"center\")\n    RangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceUpStart,start(testRangesPos)+distanceDownEnd),name=testRangesPos$name)\n    RangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(end(testRangesNeg)-distanceDownEnd,end(testRangesNeg)+distanceUpStart),name=testRangesNeg$name)  \n    \n    for(c in 1:length(chromosomes)){\n      if(length(RangesPos[seqnames(RangesPos) %in% chromosomes[c]]) > 0){\n        PosRegionMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(RangesPos[seqnames(RangesPos) %in% chromosomes[c]])]),ncol=mean(width(RangesPos)),byrow=TRUE)\n        rownames(PosRegionMat) <- RangesPos[seqnames(RangesPos) %in% chromosomes[c]]$name\n        #      print(\"done1.3\")\n      }\n      if(length(RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]]) > 0){\n        NegRegionMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]])])),ncol=mean(width(RangesNeg)),byrow=TRUE)\n        rownames(NegRegionMat) <- RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]]$name\n      }    \n      RegionsMat <- rbind(RegionsMat,PosRegionMat,NegRegionMat)\n    }\n    return(RegionsMat)\n  }\n    if(style==\"region\"){\n\n      message(\"Defining flanks of regions..\",appendLF=FALSE)\n  \n      startRegionRangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceOutRegionStart,start(testRangesPos)+distanceInRegionStart),name=testRangesPos$name)\n      endRegionRangesPos <- GRanges(seqnames(testRangesPos),IRanges(end(testRangesPos)-distanceInRegionEnd,end(testRangesPos)+distanceOutRegionEnd),name=testRangesPos$name)\n      startRegionRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(end(testRangesNeg)-distanceInRegionStart,end(testRangesNeg)+distanceOutRegionStart),name=testRangesNeg$name)\n      endRegionRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)-distanceOutRegionEnd,start(testRangesNeg)+distanceInRegionEnd),name=testRangesNeg$name)\n      \n      testRangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)+distanceInRegionStart,end(testRangesPos)-distanceInRegionEnd),name=testRangesPos$name)\n      testRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)+distanceInRegionEnd,end(testRangesNeg)-distanceInRegionStart),name=testRangesNeg$name)     \n      message(\"...Done\")\n      meansList <- vector(\"numeric\")\n      grListWindowsPos <- GRanges()\n      grListWindowsNeg <- GRanges()\n      #grListWindows <- list()\n      message(\"Making windows..\",appendLF=FALSE)\n      \n      \n      \n      if(length(testRangesNeg) > 0){\n        grWidths <- width(testRangesPos)  \n        windows <- floor(grWidths%/%nOfWindows)\n        extraLastWindow <- grWidths%%nOfWindows\n        addToWindow <- 0\n        for(i in 1:nOfWindows){\n          \n          if(i == nOfWindows){\n            addToWindow <- extraLastWindow \n          }\n          grListWindowsPos <- c(grListWindowsPos,GRanges(seqnames(testRangesPos),IRanges(  \t\t\n            start(testRangesPos)+(windows*(i-1)),\n            start(testRangesPos)+(windows*i)-1+addToWindow),name=testRangesPos$name))\n        }\n      }\n      grListWindowsPos <- grListWindowsPos[order(grListWindowsPos$name)]\n      if(length(testRangesNeg) > 0){\n        grWidths <- width(testRangesNeg)\n        windows <- floor(grWidths%/%nOfWindows)\n        extraLastWindow <- grWidths%%nOfWindows\n        addToWindow <- 0\n        for(i in 1:nOfWindows){\n          \n          if(i == nOfWindows){\n            addToWindow <- extraLastWindow \n          }\n          grListWindowsNeg <- c(grListWindowsNeg,GRanges(seqnames(testRangesNeg),IRanges(     \n            end(testRangesNeg)-(windows*i)+1-addToWindow,\n            end(testRangesNeg)-(windows*(i-1))),name=testRangesNeg$name))\n        }\n        grListWindowsNeg <- grListWindowsNeg[order(grListWindowsNeg$name)]\n      }\n      grListWindows <- c(grListWindowsPos,grListWindowsNeg)\n      message(\"..done\\n\")\n      message(\"Calculating per chromsome\")      \n      for(c in 1:length(chromosomes)){\n\n        message(\"Processing inner region windows in \",chromosomes[c])\n        covPerPeak <- Views(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]],ranges(grListWindows[seqnames(grListWindows) == chromosomes[c]]))\n        doubleTemp <- viewMeans(covPerPeak)\n        names(doubleTemp) <- as.vector(grListWindows[seqnames(grListWindows) == chromosomes[c]]$name)\n        meansList <- c(meansList,doubleTemp)\n        message(\"..done\")\n        message(\"Processing flanking windows in \",chromosomes[c])      \n        \n        tempstartRegionRangesPosMat <- NULL\n        tempendRegionRangesPosMat <- NULL  \n        tempstartRegionRangesNegMat <- NULL\n        tempendRegionRangesNegMat <- NULL    \n        \n        if(length(startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]]) > 0){\n          tempstartRegionRangesPosMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]])]),ncol=mean(width(startRegionRangesPos)),byrow=TRUE)\n          rownames(tempstartRegionRangesPosMat) <- startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]]$name\n        }\n      \n        if(length(endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]]) > 0){\n          tempendRegionRangesPosMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]])]),ncol=mean(width(endRegionRangesPos)),byrow=TRUE)\n          rownames(tempendRegionRangesPosMat) <- endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]]$name\n        }\n        if(length(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]]) > 0){\n          tempstartRegionRangesNegMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]])])),ncol=mean(width(startRegionRangesNeg)),byrow=TRUE)\n          rownames(tempstartRegionRangesNegMat) <- rev(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]]$name)\n        }\n        #print(\"done4\")  \n        if(length(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]]) > 0){\n          #tempNegTTSMat <- matrix(rev(as.vector(unlist(Views(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]],ranges(ttsRangesNeg[seqnames(ttsRangesNeg) %in% chromosomes[c]]))))),ncol=mean(width(ttsRangesNeg)),byrow=TRUE)\n          tempendRegionRangesNegMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]])])),ncol=mean(width(endRegionRangesNeg)),byrow=TRUE)\n          rownames(tempendRegionRangesNegMat) <- rev(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]]$name)\n        }\n        #print(\"done5\")\n\n        posRegionStartMat <- rbind(posRegionStartMat,tempstartRegionRangesPosMat)\n        posRegionEndMat <- rbind(posRegionEndMat,tempendRegionRangesPosMat)\n        negRegionStartMat <- rbind(negRegionStartMat,tempstartRegionRangesNegMat)\n        negRegionEndMat <- rbind(negRegionEndMat,tempendRegionRangesNegMat)\n        tempstartRegionRangesPosMat <- NULL\n        tempendRegionRangesPosMat <- NULL  \n        tempstartRegionRangesNegMat <- NULL\n        tempendRegionRangesNegMat <- NULL           \n        message(\"..done\")\n    }\n      AllRegionStart <- rbind(posRegionStartMat,negRegionStartMat)\n      AllRegionEnd <- rbind(posRegionEndMat,negRegionEndMat)\n      meansMat <- matrix(meansList,ncol=nOfWindows,byrow=T)\n      rownames(meansMat) <- matrix(names(meansList),ncol=nOfWindows,byrow=T)[,1]    \n    start <- cbind(seq(1:length(colMeans(AllRegionStart))),colMeans(AllRegionStart))\n    mid <- cbind(max(start[,1])+seq(1:length(colMeans(meansMat)))*100,colMeans(meansMat))\n    end <- cbind(max(mid[,1])+seq(1:length(colMeans(AllRegionEnd))),colMeans(AllRegionEnd))\n    return(list(meansMat,AllRegionStart,AllRegionEnd,rbind(start,mid,end)))\n\n} \n}\n\nmm9Genes <- read.delim(\"/Users/tcarroll/Downloads/mm9Genes_May2012.txt\",sep=\"\\t\",h=T)\n\nmm9GeneRanges <- GRanges(seqnames=paste0(\"chr\",mm9Genes[,3]),ranges=IRanges(start=mm9Genes[,1],end=mm9Genes[,2]),strand=mm9Genes[,4],name=mm9Genes[,5],biotype=mm9Genes[,6])\nJustChrOfInterest <- unique(as.vector(seqnames(mm9GeneRanges)))[grep(\"chr\\\\d.|chr\\\\d|chrX|chrY|chrM\",unique(as.vector(seqnames(mm9GeneRanges))))]\nmm9PC <- mm9GeneRanges[mm9GeneRanges$biotype == \"protein_coding\"]\nmm9PC <- mm9PC[order(width(mm9PC),decreasing=T)]\nmm9PC <- mm9PC[match(unique(mm9PC$name),mm9PC$name)]\nmm9PC <- mm9PC[!mm9PC$name == \"\"]\nmm9PC <- mm9PC[seqnames(mm9PC) %in% JustChrOfInterest]\nmm9PC <- mm9PC[width(mm9PC) > 200]\n\n#mm9DF <- as.data.frame(mm9PC)\n\nmm9TSS <- GetTargetTSS(mm9PC,300,300,500)\n#bamFile <-\"Downloads//mergedETOH.bwRange5.bw\"\n#bamFile <-\"Downloads//Sample_R1-6hDupMarkedNormalised.bw\"\n#res <- regionPlot(\"/home//pgellert/Dropbox (Lymphocyte_Developme)/WeiWeiLiang/RNAPII/Sample_R1-0hDupMarked.bam\",mm9TSS)\n#res1 <- regionPlot(\"/home//pgellert/Dropbox (Lymphocyte_Developme)/WeiWeiLiang/nucelosome/fromMRC/mergedETOH.bwRange5.bw\",mm9PC,style=\"region\",format=\"bigwig\")\nnuc0h <- regionPlot(\"Downloads//mergedETOH.bwRange5.bw\",mm9PC,style=\"region\",format=\"bigwig\")\nnuc6h <- regionPlot(\"Downloads//mergedOHT.bwRange5.bw\",mm9PC,style=\"region\",format=\"bigwig\")\npol6h <- regionPlot(\"Downloads//Sample_R2-6hDupMarkedNormalised.bw\",mm9PC,style=\"region\",format=\"bigwig\")\npol0h <- regionPlot(\"Downloads//Sample_R1-0hDupMarkedNormalised.bw\",mm9PC,style=\"region\",format=\"bigwig\")\nnuc0h4 <- regionPlot(\"Downloads//mergedETOH.bwRange4.bw\",mm9PC,style=\"region\",format=\"bigwig\")\n\nnuc6h4 <- regionPlot(\"Downloads//mergedOHT.bwRange4.bw\",mm9PC,style=\"region\",format=\"bigwig\")\nnuc6h3 <- regionPlot(\"Downloads//mergedOHT.bwRange3.bw\",mm9PC,style=\"region\",format=\"bigwig\")\nnuc6h2 <- regionPlot(\"Downloads//mergedOHT.bwRange2.bw\",mm9PC,style=\"region\",format=\"bigwig\")\ndir(\"Downloads\")\nb3ranges <- ChIPQC:::GetGRanges(\"Downloads//B3Peaks.bed.txt\")\nIk6h <- regionPlot(\"Downloads//mergedOHT.bwRange5.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk0h <- regionPlot(\"Downloads//mergedETOH.bwRange5.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk6h4 <- regionPlot(\"Downloads//mergedOHT.bwRange4.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk0h4 <- regionPlot(\"Downloads//mergedETOH.bwRange4.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk6h3 <- regionPlot(\"Downloads//mergedOHT.bwRange3.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk0h3 <- regionPlot(\"Downloads//mergedETOH.bwRange3.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk6h2 <- regionPlot(\"Downloads//mergedOHT.bwRange2.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk0h2 <- regionPlot(\"Downloads//mergedETOH.bwRange2.bw\",b3ranges,style=\"point\",format=\"bigwig\")\n\n\nIk0h2me2 <- regionPlot(\"Downloads//Mi2b_IKneg.bw\",b3ranges,style=\"point\",format=\"bigwig\")\nIk6h2me2 <- regionPlot(\"Downloads//Mi2b_IKpos.bw\",b3ranges,style=\"point\",format=\"bigwig\")\n\ntss0h2me2 <- regionPlot(\"Downloads//Mi2b_IKneg.bw\",mm9PC,style=\"region\",format=\"bigwig\")\ntss6h2me2 <- regionPlot(\"Downloads//Mi2b_IKpos.bw\",mm9PC,style=\"region\",format=\"bigwig\")\n\npar(mfrow=c(2,1))\nplot(tss6h2me2[[4]],col=\"darkblue\",type=\"l\")\nplot(tss0h2me2[[4]],col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h2me2),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h2me2)/colMeans(Ik0h2me2)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h2me2),col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h)/colMeans(Ik0h)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h),col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h)/colMeans(Ik0h)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h),col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h4),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h4)/colMeans(Ik0h4)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h4),col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h3),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h3)/colMeans(Ik0h3)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h3),col=\"darkred\",type=\"l\")\n###############\npar(mfrow=c(3,1))\nplot(colMeans(Ik6h2),col=\"darkblue\",type=\"l\")\nplot(log2(colMeans(Ik6h2)/colMeans(Ik0h3)),col=\"darkred\",type=\"l\")\nplot(colMeans(Ik0h2),col=\"darkred\",type=\"l\")\n\n\n\n\n\n\nplot(pol0h[[4]][1:3000,1],runmean(pol0h[[4]][1:3000,2],1),col=\"darkred\",type=\"l\",ylim=c(0,3.5))\nlines(nuc6h[[4]][1:3000,1],runmean(nuc6h[[4]][1:3000,2],1)-2.8,col=\"darkblue\")\npar(mfrow=c(2,3))\nplot(pol0h[[4]][1:3000,1],runmean(pol0h[[4]][1:3000,2],1),col=\"darkred\",type=\"l\")\nplot(nuc6h[[4]][1:3000,1],runmean(nuc6h[[4]][1:3000,2],1),col=\"darkred\",type=\"l\")\nplot(nuc6h4[[4]][1:3000,1],runmean(nuc6h4[[4]][1:3000,2],1),col=\"darkred\",type=\"l\")\nplot(nuc6h3[[4]][1:3000,1],runmean(nuc6h3[[4]][1:3000,2],1),col=\"darkred\",type=\"l\")\nplot(nuc6h2[[4]][1:3000,1],runmean(nuc6h2[[4]][1:3000,2],1),col=\"darkred\",type=\"l\")\npng(\"Downloads/Profiles.png\",width=1000,height=2000)\npar(mfrow=c(6,1))\nplot(pol0h[[4]][,1],runmean(pol0h[[4]][,2],1),col=\"darkred\",type=\"l\",lwd=2)\nplot(nuc6h[[4]][,1],runmean(nuc6h[[4]][,2],1),col=\"darkred\",type=\"l\",lwd=2)\nplot(nuc6h4[[4]][,1],runmean(nuc6h4[[4]][,2],1),col=\"darkred\",type=\"l\",lwd=2)\nplot(nuc6h3[[4]][,1],runmean(nuc6h3[[4]][,2],1),col=\"darkred\",type=\"l\",lwd=2)\nplot(nuc6h2[[4]][,1],runmean(nuc6h2[[4]][,2],1),col=\"darkred\",type=\"l\",lwd=2)\ndev.off()\n\nlines(nuc6h[[4]][1:3000,1],runmean(nuc6h[[4]][1:3000,2],1)-2.8,col=\"darkblue\")\n\n\n\nnuc0h80 <- regionPlot(\"/Users/tcarroll//Downloads//mergedETOH.bamRange5.bam\",mm9PC,style=\"region\",paired=T,format=\"bam\",forceFragment=80)\n",
    "created" : 1405280738795.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "220803100",
    "id" : "92471D2C",
    "lastKnownWriteTime" : 1406136281,
    "path" : "~/Desktop/rtracktables/rtracktables2.r",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}