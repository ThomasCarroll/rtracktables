{
    "contents" : "MakeIGVSampleMetadata <- function(sampleMetadata,SampleSheet,igvdirectory){\n  write.table(\"#sampleTable\",file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,sep=\"\\t\")\n  colnames(sampleMetadata)[1] <- \"Linking_id\"\n  print(colnames(sampleMetadata))\n  write.table(sampleMetadata,file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=T,quote=F,append=T,sep=\"\\t\")\n  BamMappings <- cbind(paste(SampleSheet[!is.na(SampleSheet[,\"bam\"]),\"SampleName\"],\"Bam\",sep=\"_\"),SampleSheet[,\"SampleName\"])\n  BigWigMappings <- cbind(paste(SampleSheet[!is.na(SampleSheet[,\"bigwig\"]),\"SampleName\"],\"Bigwig\",sep=\"_\"),SampleSheet[,\"SampleName\"])\n  IntervalMappings <- cbind(paste(SampleSheet[!is.na(SampleSheet[,\"interval\"]),\"SampleName\"],\"Interval\",sep=\"_\"),SampleSheet[,\"SampleName\"])\n  write.table(\"\\n#sampleMapping\",file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(\"#Bams\",file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(BamMappings,file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(\"\\n#BigWigs\",file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(BigWigMappings,file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(\"\\n#Intervals\",file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n  write.table(IntervalMappings,file.path(igvdirectory,\"SampleMetadata.txt\"),row.names=F,col.names=F,quote=F,append=T,sep=\"\\t\")\n}\nMakeIGVSessionXML <- function(SampleSheet,igvdirectory,XMLname,genomeName,locusName=\"All\"){\n  i <- 1\n  require(XML)\n  Output <- file.path(igvdirectory,paste(XMLname,\".xml\",sep=\"\"))\n  GlobalNode <- newXMLNode(\"Global\",attrs=c(genome.value=genomeName,groupTracksBy=\"Linking_id\",locus=locusName,version=3))\n  ResourcesNode <- newXMLNode(\"Resources\",parent=GlobalNode)\n  MetaDataNode <- newXMLNode(\"Resource\",parent=ResourcesNode,attrs=c(name=\"SampleMetadata\",path=relativePath(file.path(igvdirectory,\"SampleMetadata.txt\"),Output),relativePath=T))\n  PanelDataNode <-  newXMLNode(\"Panel\",attrs=c(height=\"350\",name=\"DataPanel\",width=\"1115\"),parent=GlobalNode)\n  #bamFiles <- SampleSheet[!is.na(SampleSheet[,\"bam\"]),\"bam\"]\n  #bigwigFiles <- SampleSheet[!is.na(SampleSheet[,\"bigwig\"]),\"bigwig\"]\n  #intervals <- SampleSheet[!is.na(SampleSheet[,\"interval\"]),\"interval\"]\n  bamFiles <- SampleSheet[,\"bam\"]\n  bigwigFiles <- SampleSheet[,\"bigwig\"]\n  intervalFiles <- SampleSheet[,\"interval\"]    \n  resources <- vector(\"list\")\n  #print(Output)\n  for(i in 1:nrow(SampleSheet)){\n    print(i)\n    if(!is.na(SampleSheet[i,\"bam\"])){\n      NewName <- paste(SampleSheet[i,\"SampleName\"],\"_Bam\",sep=\"\")\n      resources <-  c(resources,list(newXMLNode(\"Resource\",parent=ResourcesNode,attrs=c(label=NewName,name=NewName,path=relativePath(bamFiles[i],Output),relativePath=T))))\n      TrackNode <-  newXMLNode(\"Track\",attrs=c(altColor=\"0,0,178\",color=\"0,0,178\",colorOption=\"UNEXPECTED_PAIR\",displayMode=\"EXPANDED\",featureVisibilityWindow=\"-1\",fontSize=\"10\",id=relativePath(bamFiles[i],Output),name=NewName,showDataRange=\"true\",sortByTag=\"\",visible=\"true\"),parent=PanelDataNode)\n    }\n    if(!is.na(SampleSheet[i,\"interval\"])){\n      NewName <- paste(SampleSheet[i,\"SampleName\"],\"_Interval\",sep=\"\")\n      resources <-  c(resources,list(newXMLNode(\"Resource\",parent=ResourcesNode,attrs=c(label=NewName,name=NewName,path=relativePath(intervalFiles[i],Output),relativePath=T))))\n      TrackNode <-  newXMLNode(\"Track\",attrs=c(altColor=\"0,0,178\",color=\"0,0,178\",displayMode=\"COLLAPSED\",featureVisibilityWindow=\"-1\",fontSize=\"10\",height=\"45\",id=relativePath(intervalFiles[i],Output),name=NewName,renderer=\"BASIC_FEATURE\",showDataRange=\"true\",sortable=\"false\",visible=\"true\",windowFunction=\"count\"),parent=PanelDataNode)\n    }\n    if(!is.na(SampleSheet[i,\"bigwig\"])){\n      NewName <- paste(SampleSheet[i,\"SampleName\"],\"_Bigwig\",sep=\"\")\n      print(relativePath(bigwigFiles[i],Output))\n      resources <-  c(resources,list(newXMLNode(\"Resource\",parent=ResourcesNode,attrs=c(label=NewName,name=NewName,path=relativePath(bigwigFiles[i],Output),relativePath=T))))\n      TrackNode <-  newXMLNode(\"Track\",attrs=c(altColor=\"0,0,178\",autoscale=\"true\",color=\"0,0,178\",displayMode=\"COLLAPSED\",featureVisibilityWindow=\"-1\",fontSize=\"10\",id=relativePath(bigwigFiles[i],Output),name=NewName,renderer=\"BAR_CHART\",showDataRange=\"true\",visible=\"true\",windowFunction=\"mean\"),parent=PanelDataNode)\n      DisplayRangeNode <-  newXMLNode(\"DataRange\",attrs=c(baseline=\"0.0\",drawBaseline=\"true\",flipAxis=\"false\",maximum=\"50\",minimum=\"5\",type=\"LINEAR\"),parent=TrackNode)\n    }\n  }  \n  saveXML(GlobalNode,file=Output)\n  \n  return(Output)\n}\n\nexportNormalisedBW <- function(bamFile,qc,normaliseTo=\"blacklisted\"){\n  require(GenomicAlignments)\n  require(rtracklayer)\n  #library(QuasR)\n  extendBy <- fragmentlength(qc)\n  #extendBy <- qc\n  message(\"Reading tags from \",bamFile,appendLF=FALSE)\n  #totalReads <- alignmentStats(bamFile)[,\"mapped\"]\n  if(normaliseTo == \"blacklisted\"){\n    totalReads <- qc@FlagAndTagCounts[\"MapQPass\"] - qc@CountsInFeatures$BlackList\n  }\n  if(normaliseTo == \"Total\"){\n    totalReads <- qc@FlagAndTagCounts[\"Mapped\"]\n  }  \n  if(normaliseTo == \"UniqueTotal\"){\n    totalReads <- qc@FlagAndTagCounts[\"Mapped\"]-qc@FlagAndTagCounts[\"Duplicates\"]\n  }  \n  total <- readGAlignmentsFromBam(bamFile)\n  message(\"..done\")\n  message(\"Read in \",length(total),\" reads\")\n  message(\"Extending reads to fragmentlength of \",extendBy,\" ..\",appendLF=FALSE)\n  temp <- resize(as(total,\"GRanges\"),extendBy,\"start\")\n  message(\"..done\")\n  rm(total)\n  gc()\n  message(\"Calculating coverage..\",appendLF=FALSE)\n  genomeCov <- coverage(temp)\n  rm(temp)\n  message(\"..done\")\n  \n  message(\"Normalised coverage..\",appendLF=FALSE)\n  genomeCov <- (genomeCov/totalReads)*1000000\n  message(\"..done\")\n  message(\"Exporting coverage..\",appendLF=FALSE)\n  export.bw(genomeCov,file.path(dirname(dirname(bamFile)),gsub(\"\\\\.bam\",\"Normalised\\\\.bw\",basename(bamFile))))\n  message(\"..done\")\n}\n\nGetAroundTSS <- function(FullGeneBounds,distance,distanceIn){\n  require(GenomicRanges)\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  TempFramePos <- cbind(as.data.frame(elementMetadata(PosGenes)),width(PosGenes))\n  TempFrameNeg <- cbind(as.data.frame(elementMetadata(NegGenes)),width(NegGenes))\n  colnames(TempFramePos)[3] <- \"WidthOfOriginalGene\"\n  colnames(TempFrameNeg)[3] <- \"WidthOfOriginalGene\"  \n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(start(ranges(PosGenes))))-distance,end=(as.vector(start(ranges(PosGenes))))+distanceIn),strand=strand(PosGenes),TempFramePos)\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(end(ranges(NegGenes)))-distanceIn),end=(as.vector(end(ranges(NegGenes))))+distance),strand=strand(NegGenes),TempFrameNeg)\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\n\nGetTargetTSS <- function(RegionRanges,distance,distanceIn=0,min){\n  RegionRanges <- RegionRanges[width(RegionRanges) > min]\n  TSSs <- GetAroundTSS(RegionRanges,distance,distanceIn=distanceIn)\n  #print(TSSs)\n  #  Centre <- GRanges(seqnames=seqnames(RegionRanges),IRanges(start=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)-distance),end=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)+distance)),strand=\"*\")\n  #RegionRangesList <- GRangesList(TSSs[strand(TSSs) == \"+\"],TSSs[strand(TSSs) == \"-\"])\n  return(TSSs)\n}\n\nGetAroundTTS <- function(FullGeneBounds,distance,distanceIn){\n  require(GenomicRanges)\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  TempFramePos <- cbind(as.data.frame(elementMetadata(PosGenes)),width(PosGenes))\n  TempFrameNeg <- cbind(as.data.frame(elementMetadata(NegGenes)),width(NegGenes))\n  colnames(TempFramePos)[3] <- \"WidthOfOriginalGene\"\n  colnames(TempFrameNeg)[3] <- \"WidthOfOriginalGene\"  \n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(end(ranges(PosGenes))))-distanceIn,end=(as.vector(end(ranges(PosGenes))))+distance),strand=strand(PosGenes),TempFramePos)\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(start(ranges(NegGenes)))-distance),end=(as.vector(start(ranges(NegGenes))))+distanceIn),strand=strand(NegGenes),TempFrameNeg)\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\n\nGetTargetTTS <- function(RegionRanges,distance,distanceIn=0,min){\n  RegionRanges <- RegionRanges[width(RegionRanges) > min]\n  TTSs <- GetAroundTTS(RegionRanges,distance,distanceIn=distanceIn)\n  #print(TSSs)\n  #  Centre <- GRanges(seqnames=seqnames(RegionRanges),IRanges(start=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)-distance),end=round((((as.vector(start(ranges(RegionRanges))))+(as.vector(end(ranges(RegionRanges)))))/2)+distance)),strand=\"*\")\n  #RegionRangesList <- GRangesList(TSSs[strand(TSSs) == \"+\"],TSSs[strand(TSSs) == \"-\"])\n  return(TTSs)\n}\n\n\nGetGene <- function(FullGeneBounds,distanceFromStart,distanceFromEnd,min){\n  require(GenomicRanges)\n  FullGeneBounds <- FullGeneBounds[width(FullGeneBounds) > min]\n  PosGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"+\"])\n  NegGenes <-  (FullGeneBounds[strand(FullGeneBounds) == \"-\"])\n  NewPosGenes <- GRanges(seqnames=seqnames(PosGenes),IRanges(start=(as.vector(start(ranges(PosGenes))))-distanceFromStart,end=(as.vector(end(ranges(PosGenes))))+distanceFromEnd),strand=strand(PosGenes),elementMetadata(PosGenes))\n  NewNegGenes <- GRanges(seqnames=seqnames(NegGenes),IRanges(start=(as.vector(start(ranges(NegGenes)))-distanceFromEnd),end=(as.vector(end(ranges(NegGenes))))+distanceFromStart),strand=strand(NegGenes),elementMetadata(NegGenes))\n  names(NewPosGenes) <- names(PosGenes)\n  names(NewNegGenes) <- names(NegGenes)\n  AllPromoters <- c(NewPosGenes,NewNegGenes)\n  return(AllPromoters)\n}\nregionPlot <- function(bamFile,testRanges,nOfWindows=100,FragmentLength=150,style=\"point\",distanceAround=1500,distanceInRegionStart=1500,distanceOutRegionStart=1500,distanceInRegionEnd=1500,distanceOutRegionEnd=1500,paired=F,normalize=\"RPM\",plotBy=\"coverage\",removeDup=F,verbose=T,format=\"bam\",seqlengths=NULL){\n  if(!verbose){\n    suppressMessages(runRegionPlot())\n  }\n  result <- runRegionPlot(bamFile,testRanges,nOfWindows,FragmentLength,style,distanceAround,distanceInRegionStart,distanceOutRegionStart,distanceInRegionEnd,distanceOutRegionEnd,paired,normalize,plotBy,removeDup,format,seqlengths)\n  return(result)  \n}\nrunRegionPlot <- function(bamFile,testRanges,nOfWindows=100,FragmentLength=150,style=\"point\",distanceAround=1500,distanceInRegionStart=1500,distanceOutRegionStart=1500,distanceInRegionEnd=1500,distanceOutRegionEnd=1500,paired=F,normalize=\"RPM\",plotBy=\"coverage\",removeDup=F,format=\"bam\",seqlengths=NULL){\n  require(QuasR)\n  require(rtracklayer)  \n  require(GenomicAlignments)\n  require(GenomicRanges)  \n  \n  #bamFile <- \"/home//pgellert/Dropbox (Lymphocyte_Developme)/WeiWeiLiang/RNAPII/Sample_R1-0hDupMarked.bam\"\n  #bamFile <-\"Downloads//mergedETOH.bwRange5.bw\"\n  #bamFile <-\"Downloads//Sample_R1-6hDupMarkedNormalised.bw\"\n  #testRanges <- mm9PC\n  #nOfWindows=100\n  #FragmentLength=150\n  #style=\"region\"\n  #distanceAround=1500\n  #distanceInRegionStart=1500\n  #distanceOutRegionStart=1500\n  #distanceInRegionEnd=1500\n  #distanceOutRegionEnd=1500\n  #paired=F\n  #normalize=\"RPM\"\n  #plotBy=\"coverage\"\n  #removeDup=F  \n  #format=\"bigwig\"\n  #seqlengths=NULL\n  \n  ## Initialize empty matricies and paramaters for collecting coverage analysis\n  if(style == \"region\" | style==\"regionandpoint\"){\n    posRegionStartMat <- NULL\n    posRegionEndMat <- NULL\n    negRegionStartMat <- NULL\n    negRegionEndMat <- NULL\n    RegionsMat <- NULL\n    maxDistance <- max(distanceOutRegionStart,distanceOutRegionEnd)\n    distanceUpStart <- distanceOutRegionStart\n    distanceDownEnd <- distanceOutRegionEnd\n    \n  }\n  \n  if(style == \"point\"){\n    PosRegionMat <- NULL\n    NegRegionMat <- NULL\n    RegionsMat <- NULL    \n    maxDistance=distanceAround\n    distanceUpStart <- distanceAround\n    distanceDownEnd <- distanceAround    \n  }\n  \n  if(format == \"bam\"){\n    ## Get all chromosomes in bamFile\n    message(\"Reading Bam header information...\",appendLF = FALSE)\n    allchrs <- names(scanBamHeader(bamFile)[[1]]$targets)\n    lengths <- as.vector(scanBamHeader(bamFile)[[1]]$targets)\n    names(lengths) <- allchrs\n    message(\"..Done\")\n  }\n  if(format==\"bigwig\"){\n    message(\"Importing BigWig...\",appendLF = FALSE)\n    genomeCov <- import.bw(bamFile,as = \"RleList\")\n    if(is.null(seqlengths)){\n      seqlengths(genomeCov) <- unlist(lapply(genomeCov,length))\n    }else{\n      seqlengths(genomeCov)[match(names(lengths),names(genomeCov))] <- lengths\n    }\n    lengths <- seqlengths(genomeCov)\n    allchrs <- names(lengths)\n    message(\"..Done\")\n  }\n  \n  \n  ## Filter testRanges to those contained within chromosomes.\n  message(\"Filtering regions which extend outside of genome boundaries...\",appendLF = FALSE)\n  testRangeNames <- unique(seqnames(testRanges))\n  temptestranges <- GRanges()\n  for(i in 1:length(testRangeNames)){\n    perchrRanges <- testRanges[seqnames(testRanges) %in% testRangeNames[i]]\n    temptestranges <- c(temptestranges,perchrRanges[end(perchrRanges)+maxDistance < lengths[names(lengths) %in% testRangeNames[i]]\n                                                    & start(perchrRanges)-maxDistance > 0 ])\n    #print(i)\n  }\n  \n  message(\"..Done\")\n  message(\"Filtered \",length(testRanges)-length(temptestranges),\" of \",length(testRanges),\" regions\")\n  testRanges <- temptestranges\n  message(\"Splitting regions by Watson and Crick strand..\",appendLF = FALSE)\n  \n  strand(testRanges[strand(testRanges) == \"*\"]) <- \"+\"\n  testRangesPos <- testRanges[strand(testRanges) == \"+\"]\n  testRangesNeg <- testRanges[strand(testRanges) == \"-\"]\n  message(\"..Done\")\n  if(style==\"region\"){\n    message(\"Filtering regions which are smaller than windows into region...\",appendLF = FALSE)\n    ## Split Regions into those on positive and negative strands..\n    testRangesPos <- testRangesPos[(end(testRangesPos)-distanceInRegionEnd) - (start(testRangesPos)+distanceInRegionStart) > nOfWindows]\n    testRangesNeg <- testRangesNeg[(end(testRangesNeg)-distanceInRegionStart) - (start(testRangesNeg)+distanceInRegionEnd) > nOfWindows]\n    message(\"..Done\")\n  }  \n  \n  message(\"Found \",length(testRangesPos),\" Watson strand regions\")\n  message(\"Found \",length(testRangesNeg),\" Crick strand regions\")\n  \n  \n  ## Extend regions and get positive versus negative reads.\n  message(\"Extending regions..\",appendLF=FALSE)    \n  exttestRanges <- c(GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceUpStart,end(testRangesPos)+distanceDownEnd)),\n                     GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)-distanceDownEnd,end(testRangesNeg)+distanceUpStart))\n  )\n  message(\"...done\")   \n  \n  \n  if(!removeDup){\n    Param <- ScanBamParam(which=GRanges(seqnames=seqnames(exttestRanges[seqnames(exttestRanges) %in% allchrs]),IRanges(start=start(exttestRanges[seqnames(exttestRanges) %in% allchrs]),end=end(exttestRanges[seqnames(exttestRanges) %in% allchrs]))))\n  }else{\n    Param <- ScanBamParam(flag=scanBamFlag(isDuplicate=FALSE),which=GRanges(seqnames=seqnames(exttestRanges[seqnames(exttestRanges) %in% allchrs]),IRanges(start=start(exttestRanges[seqnames(exttestRanges) %in% allchrs]),end=end(exttestRanges[seqnames(exttestRanges) %in% allchrs]))))\n  }\n  \n  if(format == \"bam\"){\n    message(\"Reading tags from \",bamFile,appendLF=FALSE)\n    totalReads <- alignmentStats(bamFile)[,\"mapped\"]\n    if(paired==FALSE){\n      total <- readGAlignmentsFromBam(bamFile,param=Param)\n      message(\"..Done.\\nRead in \",length(total),\" reads\")\n      message(\"Extending reads to fragmentlength of \",FragmentLength,appendLF=F)\n      temp <- resize(as(total,\"GRanges\"),FragmentLength,\"start\")\n      message(\"..done\")\n    }\n    if(paired==TRUE){\n      tempPaired <- readGAlignmentPairsFromBam(bamFile)\n      tempPaired <- tempPaired[isProperPair(tempPaired)]\n      temp <- GRanges(seqnames(tempPaired),IRanges(start(left(tempPaired)),end(right(tempPaired))))\n      message(\"..Done.\\nRead in \",length(temp),\" reads\")\n      message(\"..done\")\n    }  \n    message(\"Calculating coverage..\",appendLF=FALSE)\n    genomeCov <- coverage(temp)\n    message(\"..done\")\n  }\n  chromosomes <- seqlevels(genomeCov) \n  \n  if(style==\"point\"){\n    testRangesPos <- resize(testRangesPos,1,\"center\")\n    testRangesNeg <- resize(testRangesNeg,1,\"center\")\n    RangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceUpStart,start(testRangesPos)+distanceDownEnd),name=testRangesPos$name)\n    RangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(end(testRangesNeg)-distanceDownEnd,end(testRangesNeg)+distanceUpStart),name=testRangesNeg$name)  \n    \n    for(c in 1:length(chromosomes)){\n      if(length(RangesPos[seqnames(RangesPos) %in% chromosomes[c]]) > 0){\n        PosRegionMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(RangesPos[seqnames(RangesPos) %in% chromosomes[c]])]),ncol=mean(width(RangesPos)),byrow=TRUE)\n        rownames(PosRegionMat) <- RangesPos[seqnames(RangesPos) %in% chromosomes[c]]$name\n        #      print(\"done1.3\")\n      }\n      if(length(RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]]) > 0){\n        NegRegionMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]])])),ncol=mean(width(RangesNeg)),byrow=TRUE)\n        rownames(NegRegionMat) <- RangesNeg[seqnames(RangesNeg) %in% chromosomes[c]]$name\n      }    \n      RegionsMat <- rbind(RegionsMat,PosRegionMat,NegRegionMat)\n    }\n    return(RegionsMat)\n  }\n  if(style==\"region\"){\n    \n    message(\"Defining flanks of regions..\",appendLF=FALSE)\n    \n    startRegionRangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)-distanceOutRegionStart,start(testRangesPos)+distanceInRegionStart),name=testRangesPos$name)\n    endRegionRangesPos <- GRanges(seqnames(testRangesPos),IRanges(end(testRangesPos)-distanceInRegionEnd,end(testRangesPos)+distanceOutRegionEnd),name=testRangesPos$name)\n    startRegionRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(end(testRangesNeg)-distanceInRegionStart,end(testRangesNeg)+distanceOutRegionStart),name=testRangesNeg$name)\n    endRegionRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)-distanceOutRegionEnd,start(testRangesNeg)+distanceInRegionEnd),name=testRangesNeg$name)\n    \n    testRangesPos <- GRanges(seqnames(testRangesPos),IRanges(start(testRangesPos)+distanceInRegionStart,end(testRangesPos)-distanceInRegionEnd),name=testRangesPos$name)\n    testRangesNeg <- GRanges(seqnames(testRangesNeg),IRanges(start(testRangesNeg)+distanceInRegionEnd,end(testRangesNeg)-distanceInRegionStart),name=testRangesNeg$name)     \n    message(\"...Done\")\n    meansList <- vector(\"numeric\")\n    grListWindowsPos <- GRanges()\n    grListWindowsNeg <- GRanges()\n    #grListWindows <- list()\n    message(\"Making windows..\",appendLF=FALSE)\n    \n    \n    \n    if(length(testRangesNeg) > 0){\n      grWidths <- width(testRangesPos)  \n      windows <- floor(grWidths%/%nOfWindows)\n      extraLastWindow <- grWidths%%nOfWindows\n      addToWindow <- 0\n      for(i in 1:nOfWindows){\n        \n        if(i == nOfWindows){\n          addToWindow <- extraLastWindow \n        }\n        grListWindowsPos <- c(grListWindowsPos,GRanges(seqnames(testRangesPos),IRanges(    \t\n          start(testRangesPos)+(windows*(i-1)),\n          start(testRangesPos)+(windows*i)-1+addToWindow),name=testRangesPos$name))\n      }\n    }\n    grListWindowsPos <- grListWindowsPos[order(grListWindowsPos$name)]\n    if(length(testRangesNeg) > 0){\n      grWidths <- width(testRangesNeg)\n      windows <- floor(grWidths%/%nOfWindows)\n      extraLastWindow <- grWidths%%nOfWindows\n      addToWindow <- 0\n      for(i in 1:nOfWindows){\n        \n        if(i == nOfWindows){\n          addToWindow <- extraLastWindow \n        }\n        grListWindowsNeg <- c(grListWindowsNeg,GRanges(seqnames(testRangesNeg),IRanges(     \n          end(testRangesNeg)-(windows*i)+1-addToWindow,\n          end(testRangesNeg)-(windows*(i-1))),name=testRangesNeg$name))\n      }\n      grListWindowsNeg <- grListWindowsNeg[order(grListWindowsNeg$name)]\n    }\n    grListWindows <- c(grListWindowsPos,grListWindowsNeg)\n    message(\"..done\\n\")\n    message(\"Calculating per chromsome\")      \n    for(c in 1:length(chromosomes)){\n      \n      message(\"Processing inner region windows in \",chromosomes[c])\n      covPerPeak <- Views(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]],ranges(grListWindows[seqnames(grListWindows) == chromosomes[c]]))\n      doubleTemp <- viewMeans(covPerPeak)\n      names(doubleTemp) <- as.vector(grListWindows[seqnames(grListWindows) == chromosomes[c]]$name)\n      meansList <- c(meansList,doubleTemp)\n      message(\"..done\")\n      message(\"Processing flanking windows in \",chromosomes[c])      \n      \n      tempstartRegionRangesPosMat <- NULL\n      tempendRegionRangesPosMat <- NULL  \n      tempstartRegionRangesNegMat <- NULL\n      tempendRegionRangesNegMat <- NULL    \n      \n      if(length(startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]]) > 0){\n        tempstartRegionRangesPosMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]])]),ncol=mean(width(startRegionRangesPos)),byrow=TRUE)\n        rownames(tempstartRegionRangesPosMat) <- startRegionRangesPos[seqnames(startRegionRangesPos) %in% chromosomes[c]]$name\n      }\n      \n      if(length(endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]]) > 0){\n        tempendRegionRangesPosMat <- matrix(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]])]),ncol=mean(width(endRegionRangesPos)),byrow=TRUE)\n        rownames(tempendRegionRangesPosMat) <- endRegionRangesPos[seqnames(endRegionRangesPos) %in% chromosomes[c]]$name\n      }\n      if(length(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]]) > 0){\n        tempstartRegionRangesNegMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]])])),ncol=mean(width(startRegionRangesNeg)),byrow=TRUE)\n        rownames(tempstartRegionRangesNegMat) <- rev(startRegionRangesNeg[seqnames(startRegionRangesNeg) %in% chromosomes[c]]$name)\n      }\n      #print(\"done4\")  \n      if(length(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]]) > 0){\n        #tempNegTTSMat <- matrix(rev(as.vector(unlist(Views(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]],ranges(ttsRangesNeg[seqnames(ttsRangesNeg) %in% chromosomes[c]]))))),ncol=mean(width(ttsRangesNeg)),byrow=TRUE)\n        tempendRegionRangesNegMat <- matrix(rev(as.vector(genomeCov[[which(names(genomeCov) %in% chromosomes[c])]][ranges(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]])])),ncol=mean(width(endRegionRangesNeg)),byrow=TRUE)\n        rownames(tempendRegionRangesNegMat) <- rev(endRegionRangesNeg[seqnames(endRegionRangesNeg) %in% chromosomes[c]]$name)\n      }\n      #print(\"done5\")\n      \n      posRegionStartMat <- rbind(posRegionStartMat,tempstartRegionRangesPosMat)\n      posRegionEndMat <- rbind(posRegionEndMat,tempendRegionRangesPosMat)\n      negRegionStartMat <- rbind(negRegionStartMat,tempstartRegionRangesNegMat)\n      negRegionEndMat <- rbind(negRegionEndMat,tempendRegionRangesNegMat)\n      tempstartRegionRangesPosMat <- NULL\n      tempendRegionRangesPosMat <- NULL  \n      tempstartRegionRangesNegMat <- NULL\n      tempendRegionRangesNegMat <- NULL           \n      message(\"..done\")\n    }\n    AllRegionStart <- rbind(posRegionStartMat,negRegionStartMat)\n    AllRegionEnd <- rbind(posRegionEndMat,negRegionEndMat)\n    meansMat <- matrix(meansList,ncol=nOfWindows,byrow=T)\n    rownames(meansMat) <- matrix(names(meansList),ncol=nOfWindows,byrow=T)[,1]    \n    start <- cbind(seq(1:length(colMeans(AllRegionStart))),colMeans(AllRegionStart))\n    mid <- cbind(max(start[,1])+seq(1:length(colMeans(meansMat)))*100,colMeans(meansMat))\n    end <- cbind(max(mid[,1])+seq(1:length(colMeans(AllRegionEnd))),colMeans(AllRegionEnd))\n    return(list(meansMat,AllRegionStart,AllRegionEnd,rbind(start,mid,end)))\n    \n  } \n}\n",
    "created" : 1405280676580.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "473673655",
    "id" : "19E83C36",
    "lastKnownWriteTime" : 1405455059,
    "path" : "~/Desktop/rtracktables/rtracktablescode.r",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}