MakeIGVSampleMetadata(SampleSheet,fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources/","IGV"))
MakeIGVSessionXML(fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources/","IGV"),"WeiIGV","mm9",locusName="All")
Output <- file.path(igvdirectory,paste(XMLname,".xml",sep=""))
igvdirectory <- file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources/","IGV")
igvdirectory
MakeIGVSampleMetadata(SampleSheet,fileSheet,getwd())
MakeIGVSampleMetadata(SampleSheet,fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"))
igvdirectory <- file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV")
igvdirectory
XMLname <- WeiIGV
XMLname <- "WeiIGV"
require(XML)
Output <- file.path(igvdirectory,paste(XMLname,".xml",sep=""))
bamFiles <- SampleSheet[,"bam"]
bigwigFiles <- SampleSheet[,"bigwig"]
Output <- file.path(igvdirectory,paste(XMLname,".xml",sep=""))
GlobalNode <- newXMLNode("Global",attrs=c(genome.value=genomeName,groupTracksBy="Linking_id",locus=locusName,version=3))
ResourcesNode <- newXMLNode("Resources",parent=GlobalNode)
MetaDataNode <- newXMLNode("Resource",parent=ResourcesNode,attrs=c(name="SampleMetadata",path=relativePath(file.path(igvdirectory,"SampleMetadata.txt"),Output),relativePath=T))
PanelDataNode <-  newXMLNode("Panel",attrs=c(height="350",name="DataPanel",width="1115"),parent=GlobalNode)
#bamFiles <- SampleSheet[!is.na(SampleSheet[,"bam"]),"bam"]
#bigwigFiles <- SampleSheet[!is.na(SampleSheet[,"bigwig"]),"bigwig"]
#intervals <- SampleSheet[!is.na(SampleSheet[,"interval"]),"interval"]
bamFiles <- SampleSheet[,"bam"]
bigwigFiles <- SampleSheet[,"bigwig"]
intervalFiles <- SampleSheet[,"interval"]
SampleSheet <- fileSheet
require(XML)
Output <- file.path(igvdirectory,paste(XMLname,".xml",sep=""))
GlobalNode <- newXMLNode("Global",attrs=c(genome.value=genomeName,groupTracksBy="Linking_id",locus=locusName,version=3))
ResourcesNode <- newXMLNode("Resources",parent=GlobalNode)
MetaDataNode <- newXMLNode("Resource",parent=ResourcesNode,attrs=c(name="SampleMetadata",path=relativePath(file.path(igvdirectory,"SampleMetadata.txt"),Output),relativePath=T))
PanelDataNode <-  newXMLNode("Panel",attrs=c(height="350",name="DataPanel",width="1115"),parent=GlobalNode)
#bamFiles <- SampleSheet[!is.na(SampleSheet[,"bam"]),"bam"]
#bigwigFiles <- SampleSheet[!is.na(SampleSheet[,"bigwig"]),"bigwig"]
#intervals <- SampleSheet[!is.na(SampleSheet[,"interval"]),"interval"]
bamFiles <- SampleSheet[,"bam"]
bigwigFiles <- SampleSheet[,"bigwig"]
intervalFiles <- SampleSheet[,"interval"]
Output
relativePath(intervalFiles[i],Output)
i <- 1
relativePath(intervalFiles[i],Output)
read.delim(relativePath(intervalFiles[i],Output))
relativePath(intervalFiles[i],Output)
Output
source('~/Desktop/rtracktables/rtracktablescode.r')
SampleSheet <- cbind(
c("Pu1","Myc","Ik_prePro","Ik_pro"),
c("ProB","ProB","PreProB","ProB"),
c("Pu1","Myc","Ik","Ik")
)
colnames(SampleSheet) <- c("SampleName",'Tissue',"Factor")
fileSheet <- cbind(
c("Pu1","Myc","Ik_prePro","Ik_pro"),
c(NA,NA,NA,NA),
c("/Users/tcarroll/Downloads/randomTracks-2/Pu1DupMarkedNormalised.bw",
"/Users/tcarroll/Downloads/randomTracks-2/MycDupMarkedNormalised.bw",
"/Users/tcarroll/Downloads/randomTracks-2/Ikaros_2_preproBDupMarkedNormalised.bw",
"/Users/tcarroll/Downloads/randomTracks-2/Ikaros_1_proBDupMarkedNormalised.bw"),
c("/Users/tcarroll/Downloads/randomTracks/Pu1_WithInput_Input_2_proB_peaks.bed",
"/Users/tcarroll/Downloads/randomTracks/Myc_WithInput_Input_Ch12_peaks.bed",
"/Users/tcarroll/Downloads/randomTracks/Ikaros_2_preproB_WithInput_Input_2_proB_peaks.bed",
"/Users/tcarroll/Downloads/randomTracks/Ikaros_1_proB_WithInput_Input_2_proB_peaks.bed")
)
colnames(fileSheet) <- c("SampleName","bam","bigwig","interval")
MakeIGVSampleMetadata(SampleSheet,fileSheet,getwd())
MakeIGVSampleMetadata(SampleSheet,fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"))
MakeIGVSessionXML(fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"),"WeiIGV","mm9",locusName="All")
relativePath(bamFiles[i],dirname(Output))
relativePath(intervalFiles[i],dirname(Output))
relativePath(intervalFiles[i],Output)
source('~/Desktop/rtracktables/rtracktablescode.r')
MakeIGVSampleMetadata(SampleSheet,fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"))
MakeIGVSessionXML(fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"),"WeiIGV","mm9",locusName="All")
read.delim("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources/IGV/../../../randomTracks/Pu1_WithInput_Input_2_proB_peaks.bed")
read.delim("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources/IGV/../../../../randomTracks/Pu1_WithInput_Input_2_proB_peaks.bed")
source('~/Desktop/rtracktables/rtracktablescode.r')
MakeIGVSampleMetadata(SampleSheet,fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"))
MakeIGVSessionXML(fileSheet,file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV"),"WeiIGV","mm9",locusName="All")
file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV")
MakeIGVSampleMetadata(SampleSheet,fileSheet,"/Users/tcarroll//Documents")
MakeIGVSessionXML(fileSheet,"/Users/tcarroll//Documents","WeiIGV","mm9",locusName="All")
MakeIGVSampleMetadata(SampleSheet,fileSheet,"/Users/tcarroll/Documents")
MakeIGVSessionXML(fileSheet,"/Users/tcarroll/Documents","WeiIGV","mm9",locusName="All")
http://www.broadinstitute.org/igv/projects/current/igv.php?sessionURL=Documents/WeiIGV.xml
source('~/Desktop/rtracktables/rtracktablescode.r')
source('~/Desktop/rtracktables/rtracktablescode.r')
http://localhost:60151/load?file=/Users/tcarroll/Documents/WeiIGV.xml"
file.path("/Users/tcarroll/Downloads/DataTables-1.10.1/examples/data_sources","IGV")
install.packages("RJSONIO")
install.packages("RJSON")
install.packages("rjson")
library(RJSONIO)
asJSVars(c(1,2))
asJSVars(tom,c(1,2))
t <- asJSVars(c(1,2))
t
asJSVars
?asJSVars
t <- asJSVars(g=c(1,2))
t
t <- asJSVars(g=list(1,2))
t
t <- asJSVars(g=list(c(1,2),(1,4))
t <- asJSVars(g=list(c(1,2),(1,4)))
t <- asJSVars(g=list(c(1,2),c(1,4)))
t
t <- asJSVars(g=matrix(c(1,2),c(1,4)))
t
t <- asJSVars(g=matrix(c(1,2,1,4)))
t
t <- asJSVars(g=matrix(c(1:152,1,4)))
t
t <- asJSVars(g=matrix(c(1,2,1)))
t
t <- asJSVars(g=matrix(c(1,2),c(1,4)))
t
t <- asJSVars(g=matrix(c(1,2))
t
t <- asJSVars(g=matrix(c(1,2)))
t
t <- asJSVars(g=data.frame(c(1,2,1)))
t
t <- asJSVars(g=data.frame(c(1,2,1)),types=F)
t
tom <- "e"
names(tom) <- "p"
t <- asJSVars(g=tom)
t
tom <- c("e","rr")
names(tom) <- c("p","werw")
t <- asJSVars(g=tom)
t
SampleSheet
?character()
titles <- colnames(SampleSheet)
names(titles) <- "title"
titles
names(titles) <- rep("title",length=length(titles))
titles
titles <- colnames(SampleSheet)
names(titles) <- rep("title",length=length(titles))
titles
t <- asJSVars(title)
t <- asJSVars(titles)
t
t <- asJSVars(columns=titles)
t
cat(t)
merge(SampleSheet,fileSheet)
samples <- merge(SampleSheet,fileSheet)
asJSVars(samples)
cat(asJSVars(samples))
cat(asJSVars(data=samples))
colnames(samples) <- NULL
cat(asJSVars(data=samples))
samples <- merge(SampleSheet,fileSheet)
cat(asJSVars(data=t(samples)))
cat(asJSVars(data=samples))
cat(asJSVars(data=t(samples)))
cat(asJSVars(data=t(t(samples))))
samples <- t(merge(SampleSheet,fileSheet))
samples
samples[1:2,]
?t
samples <- merge(SampleSheet,fileSheet)
samples
cat(asJSVars(data=samples))
colnames(samples) <- NULL
cat(asJSVars(data=samples))
samples <- as.matrix(merge(SampleSheet,fileSheet))
samples
cat(asJSVars(data=samples))
samples <- matrix(merge(SampleSheet,fileSheet))
cat(asJSVars(data=samples))
samples <- merge(SampleSheet,fileSheet)
samples
toJSON(samples)
cat(toJSON(samples))
cat(toJSON(t(samples)))
cat(toJSON(t(t(samples))))
cat(toJSON(as.matrix(samples)))
cat(toJSON(matrix(samples)))
cat(toJSON(t(matrix(samples))))
?asJSVars
cat(toJSON(samples))
samples
t(samples)
t(samples)
t(samples)[1:3,]
samples
cat(toJSON(samples[1,]))
as.list(samples)
asJSVars(data=as.list(samples))
cat(asJSVars(data=as.list(samples)))
cat(asJSVars(data=as.list(samples,names=F)))
cat(asJSVars(data=list(samples)))
cat(toJSON(samples[1,]))
cat(toJSON(as.vector(samples[1,]))
)
cat(toJSON(samples[1,,drop=T]))
cat(toJSON(samples[1,,drop.levels=T]))
cat(toJSON(samples[1,,dropLevels=T]))
cat(toJSON(samples[1,,drop=T]))
cat(toJSON(as.vector(samples[1,])))
samples
colnames(samples) <- NULL
cat(toJSON(samples[1,,drop=T]))
cat(toJSON(samples[,,drop=T]))
cat(toJSON(samples[1,,drop=T]))
cat(toJSON(samples[1,,drop=T]))
cat(asJSVars(data=samples))
cat(asJSVars(data=samples[1,]))
cat(toJSON(samples[1,,drop=T]))
load("~/chipsVlad_report.RData")
plotCC(resExperiment,colourBy="Sample")
plotCC(resExperiment,colourBy="Factor")
ChIPQCreport(resExperiment,colourBy="Factor")
plotCC(resExperiment,colourBy="Factor")
plotRepi(resExperiment,colourBy="Factor")
plotRegi(resExperiment,colourBy="Factor")
plotRegi(resExperiment)
plotRip(resExperiment)
plotFrip(resExperiment)
plotFribl(resExperiment)
load("~/chipsVladhuman_report.RData")
plotCC(resExperiment,colourBy="Factor")
plotRegi(resExperiment,colourBy="Factor")
plotRegi(resExperiment)
plotRibl(resExperiment)
plotFribl(resExperiment)
resExperiment
peaks(resExperiment)
reduce(peaks(resExperiment))
reduce(unlist(peaks(resExperiment)))
reducedPeaks <- reduce(unlist(peaks(resExperiment)))
overlaps <- lapply(peaks(resExperiment),function(x)(reducedPeaks%over%x)+0)
reducedPeaks <- reduce(unlist(peaks(resExperiment)))
overlaps
do.call(cbind,overlaps)
reducedPeaks <- reduce(unlist(peaks(resExperiment)))
overlaps <- lapply(peaks(resExperiment),function(x)(reducedPeaks%over%x)+0)
elementMetadata(reducedPeaks) <- do.call(cbind,overlaps)
reducedPeaks
reducedPeaks[reducedPeaks$Sample_ChipHS230614Rep1+Sample_ChipHS230614Rep2 > 1]
reducedPeaks[(reducedPeaks$Sample_ChipHS230614Rep1+Sample_ChipHS230614Rep2) > 1]
reducedPeaks[(reducedPeaks$Sample_ChipHS230614Rep1+Sample_ChipHS230614Rep2) > 1,]
(reducedPeaks$Sample_ChipHS230614Rep1+Sample_ChipHS230614Rep2) > 1
reducedPeaks[(reducedPeaks$Sample_ChipHS230614Rep1+reducedPeaks$Sample_ChipHS230614Rep2) > 1,]
reducedPeaks[(reducedPeaks$Sample_ChipHS230614Rep1+reducedPeaks$Sample_ChipHS230614Rep2) > 1 & reducedPeaks$Sample_ChIPCtrl230614 == 0,]
library("ggplot2")
#number of simulations
n <-100
#rate constants
th = c(0.06,   # transcription rate
0.006,   # TF mRNA degradation rate
0.04,     # TF translation rate
0.002,	# TF protein degradation rate
0.5, 		# base miRNA transcription rate
200, 		# miRNA dissociation coefficient
2,		# hill coefficient for miRNA
0.006,	# miRNA degradation rate
0.8,		# base output transcription rate
0.04, 		# base translation rate
60, 		# output translation repression
0.05		#unregulated miRNA transcription rate
)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
gillespied=function (N, T=100, dt=1, ...)
{
tt=0
n=T%/%dt
x=N$M
S=t(N$Post-N$Pre)
u=nrow(S)
v=ncol(S)
xmat=matrix(0,ncol=u,nrow=n)
i=1
target=0
repeat {
h=N$h(x, th, ...)
h0=sum(h)
if (h0<1e-10)
tt=1e99
else
tt=tt+rexp(1,h0)
while (tt>=target) {
xmat[i,]=x
i=i+1
target=target+dt
if (i>n)
return(ts(xmat,start=0,deltat=dt))
}
j=sample(v,1,prob=h)
x=x+S[,j]
}
}
#compile R function
# test of miRNA-containing FFL
FFL=list()
#starting values
FFL$M=c(
100,100,100,100,100
)
#Reaction matrices
FFL$Pre=matrix(c(
0,0,0,0,0,
1,0,0,0,0,
1,0,0,0,0,
0,1,0,0,0,
0,0,0,0,0,
0,0,1,0,0,
0,0,0,0,0,
0,0,0,1,0,
0,0,0,1,0,
0,0,0,0,1
),ncol=5,byrow=TRUE)
FFL$Post=matrix(c(
1,0,0,0,0,
0,0,0,0,0,
1,1,0,0,0,
0,0,0,0,0,
0,0,1,0,0,
0,0,0,0,0,
0,0,0,1,0,
0,0,0,0,0,
0,0,0,1,1,
0,0,0,0,0
),ncol=5,byrow=TRUE)
#
#rate constant calculation
FFL$h=function(x,th)
{
return(c(
th[1], 								#TF transcription
th[2]*x[1],								#TF mRNA degradation
th[3]*x[1],								#TF translation
th[4]*x[2],								#TF protein degradation
(th[5]*x[2]^th[7])/(th[6]^th[7]+x[2]^th[7]),		#miRNA transcription
th[8]*x[3],								#miRNA degradation
(th[9]*x[2]^th[7])/(th[6]^th[7]+x[2]^th[7]),		#output transcription
th[2]*x[4]	,							#output mRNA degradation
(th[10]*x[4])/(1+(x[3]/th[11])^th[7]),			#output translation
th[4]*x[5]								#ouput degradation
))}
# same circuit, but with no regulation of the miRNA
Unregulated=list()
#starting values
Unregulated$M=c(
100,100,100,100,100
)
#Reaction matrices
Unregulated$Pre=matrix(c(
0,0,0,0,0,
1,0,0,0,0,
1,0,0,0,0,
0,1,0,0,0,
0,0,0,0,0,
0,0,1,0,0,
0,0,0,0,0,
0,0,0,1,0,
0,0,0,1,0,
0,0,0,0,1
),ncol=5,byrow=TRUE)
Unregulated$Post=matrix(c(
1,0,0,0,0,
0,0,0,0,0,
1,1,0,0,0,
0,0,0,0,0,
0,0,1,0,0,
0,0,0,0,0,
0,0,0,1,0,
0,0,0,0,0,
0,0,0,1,1,
0,0,0,0,0
),ncol=5,byrow=TRUE)
#rate constant calculation
Unregulated$h=function(x,th)
{
return(c(
th[1], 								    #TF transcription
th[2]*x[1],								#TF mRNA degradation
th[3]*x[1],								#TF translation
th[4]*x[2],								#TF protein degradation
th[12],	                	#miRNA transcription
th[8]*x[3],								#miRNA degradation
(th[9]*x[2]^th[7])/(th[6]^th[7]+x[2]^th[7]),  	#output transcription
th[2]*x[4]	,							#output mRNA degradation
(th[10]*x[4])/(1+(x[3]/th[11])^th[7]),			#output translation
th[4]*x[5]								#ouput degradation
))}
#Timecourse data
T<- 5000
dt<- 10
measuretime <- 4000/dt
rory1 <- function(FFL,T,dt,measuretime){
FFLOutput <-gillespied(FFL,T,dt)
UnregulatedOutput <-gillespied(Unregulated,T,dt)
list(FFLOutput = FFLOutput[measuretime,],
UnregulatedOutput = UnregulatedOutput[measuretime,])
}
ans <- mclapply(seq(1:1000),function(x)rory1(FFL,T,dt,measuretime),mc.cores = getOption("mc.cores", 5))
temp <- unlist(ans)
UnactivatedUnregulatedresults <- data.frame(matrix(temp[grep("UnregulatedOutput",names(temp))],ncol=5,byrow=T))
UnactivatedFFLresults <- data.frame(matrix(temp[grep("FFLOutput",names(temp))],ncol=5,byrow=T))
#save(UnregulatedMatrix,FFLOutput,file="Rory1.RData")
columnnames  <- c("TFmRNA","TF","miRNA","outputmRNA","output")
colnames(UnactivatedFFLresults) <- columnnames
colnames(UnactivatedUnregulatedresults) <- columnnames
UnregulatedMean <- mean(UnactivatedUnregulatedresults[,5])
FFLMean <- mean(UnactivatedFFLresults[,5])
UnregulatedSD <- sd(UnactivatedUnregulatedresults[,5])
FFLSD <- sd(UnactivatedFFLresults[,5])
RelativeMean <- UnregulatedMean/FFLMean
FFLCV <- FFLSD/FFLMean
UnregulatedCV <- UnregulatedSD/UnregulatedMean
RelativeCV <- UnregulatedCV/FFLCV
RelativeMean
RelativeCV
p1 <- ggplot(data =UnactivatedFFLresults, aes(x=output))+
geom_density(data=UnactivatedFFLresults,colour="black", fill='black', position="identity", alpha = 0.3)+
geom_density(data=UnactivatedUnregulatedresults, position="identity", color = 'red', fill='red' ,alpha = 0.4)+
xlim(0,2000)
mean(UnactivatedFFLresults$outputmRNA)
mean(UnactivatedUnregulatedresults$outputmRNA)
mean(UnactivatedFFLresults$miRNA)
mean(UnactivatedUnregulatedresults$miRNA)
###############################################
FFLresults <- data.frame()
Unregulatedresults <- data.frame()
#Run simulations with activation
#increase rate of upstream transcription factor transcription to simulate activation
#th[1]= 0.06
rory2 <- function(FFL,T,dt,measuretime){
th[1] = 0.06
FFLOutput <-gillespied(FFL,T,dt)
UnregulatedOutput <-gillespied(Unregulated,T,dt)
list(FFLOutput = FFLOutput[measuretime,],
UnregulatedOutput = UnregulatedOutput[measuretime,])
}
ans2 <- mclapply(seq(1:1000),function(x)rory2(FFL,T,dt,measuretime),mc.cores = getOption("mc.cores", 5))
temp <- unlist(ans2)
Unregulatedresults <- data.frame(matrix(temp[grep("UnregulatedOutput",names(temp))],ncol=5,byrow=T))
FFLresults <- data.frame(matrix(temp[grep("FFLOutput",names(temp))],ncol=5,byrow=T))
#save(UnregulatedMatrix,FFLOutput,file="Rory1.RData")
columnnames  <- c("TFmRNA","TF","miRNA","outputmRNA","output")
colnames(FFLresults) <- columnnames
colnames(Unregulatedresults) <- columnnames
columnnames  <- c("TFmRNA","TF","miRNA","outputmRNA","output")
colnames(FFLresults) <- columnnames
colnames(Unregulatedresults) <- columnnames
UnregulatedMean <- mean(Unregulatedresults[,5])
FFLMean <- mean(FFLresults[,5])
UnregulatedSD <- sd(Unregulatedresults[,5])
FFLSD <- sd(FFLresults[,5])
RelativeMean <- UnregulatedMean/FFLMean
FFLCV <- FFLSD/FFLMean
UnregulatedCV <- UnregulatedSD/UnregulatedMean
RelativeCV <- UnregulatedCV/FFLCV
RelativeMean
RelativeCV
p2 <- ggplot(data =FFLresults, aes(x=output))+
geom_density(data=FFLresults,colour="black", fill='black', position="identity", alpha = 0.3)+
geom_density(data=Unregulatedresults, position="identity", color = 'red', fill='red' ,alpha = 0.4)+
xlim(0,2000)
mean(FFLresults$outputmRNA)
mean(Unregulatedresults$outputmRNA)
mean(FFLresults$miRNA)
mean(Unregulatedresults$miRNA)
multiplot(p1,p2)
multiplot(p1,p2)
vladpeaks <- reducedPeaks[(reducedPeaks$Sample_ChipHS230614Rep1+reducedPeaks$Sample_ChipHS230614Rep2) > 1 & reducedPeaks$Sample_ChIPCtrl230614 == 0,]
multiplot(p1,p2)
source('~/Desktop/rtracktables/rtracktables/R/rtracktablescode2.R')
